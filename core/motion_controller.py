import serial
import time
import re
import threading
from config import CNC_SERIAL_PORT, CNC_BAUDRATE, default_Z_position
from core.logger import logger


cnc_serial = None  # glob√°ln√≠ promƒõnn√° pro s√©riov√Ω port
position_timer = None

# === Sd√≠len√© promƒõnn√© ===

position_lock = threading.Lock()
io_lock = threading.RLock()
grbl_status = "Unknown"  # Stav GRBL, zda je Idle nebo ne
grbl_last_position = "0.001,0.002,0.003"

def init_grbl():
    global cnc_serial, grbl_last_position, grbl_status, position_lock, position_timer

    cnc_serial = serial.Serial()
    cnc_serial.port = CNC_SERIAL_PORT
    cnc_serial.baudrate = CNC_BAUDRATE
    cnc_serial.timeout = 1
    cnc_serial.dtr = False
    cnc_serial.rts = False
    try:
        cnc_serial.open()
    except Exception as e:
        import tkinter.messagebox as mbox
        mbox.showerror("Chyba p≈ôi otev√≠r√°n√≠ portu", f"Nepoda≈ôilo se otev≈ô√≠t s√©riov√Ω port:\n{e}")
        raise

    time.sleep(2)
    cnc_serial.reset_input_buffer()

    def update_position():
        global grbl_last_position, grbl_status, position_lock

        try:
            grbl_last_position, grbl_status = grbl_update_position()
            # print(f"[GRBL] Aktu√°ln√≠ pozice: {grbl_last_position}, Stav: {grbl_status}")
        except:
            print("Chyba p≈ôi aktualizaci pozice GRBL")
        position_timer = threading.Timer(0.5, update_position) #update pozice ka≈æd√Ωch 0.5s, ƒçastƒõji nest√≠h√° Arduino GRBL odpov√≠dat
        position_timer.daemon = True
        position_timer.start()

    update_position() # spust√≠ periodick√© aktualizace pozice

    try:

        if grbl_last_position != "0.000,0.000,0.000":
            x, y, z = [float(val) for val in grbl_last_position.split(",")]
            print(f"[GRBL] Stav:{grbl_status} , Pozice (MPos): X={x:.3f}, Y={y:.3f}, Z={z:.3f}")
        else:
            print("MPos nenalezena, provedu Homing a nastav√≠m na v√Ωchoz√≠ hodnoty")
            grbl_abort()
            time.sleep(1)
            grbl_clear_alarm()
            grbl_home()
    except:
        print("Chyba inicializace GRBL")

def send_gcode(command: str):
    global cnc_serial, grbl_status, grbl_last_position

    if cnc_serial is None or not cnc_serial.is_open:
        print("[GRBL] Port nen√≠ otev≈ôen√Ω")

    with io_lock:  # dr≈æ√≠me linku exkluzivnƒõ
        print(f"[GRBL] Pos√≠l√°m: {command}")
        cnc_serial.flush()
        for attempt in range(3):
            try:
                cnc_serial.write((command + "\n").encode())
                break
            except serial.SerialTimeoutException:
                print(f"[GRBL] Timeout p≈ôi z√°pisu (pokus {attempt + 1})")
                time.sleep(0.5)
        else:
            print("[GRBL] Nepoda≈ôilo se odeslat po 3 pokusech.")
            return

        # ƒåti odpovƒõdi a≈æ do 'ok' (nebo do vypr≈°en√≠ kr√°tk√©ho okna)
        t0 = time.time()
        while time.time() - t0 < 0.8:
            line = cnc_serial.readline().decode(errors='ignore').strip()
            if not line:
                break
            # print(f"[GRBL] Odpovƒõƒè: {line}")
            if line == "ok":
                break

        # >>> NOV√â: hned po p≈ô√≠kazu udƒõlej rychl√© '?' pro ƒçerstv√Ω stav
        try:
            cnc_serial.write(b'?')
            cnc_serial.flush()
            t1 = time.time()
            while time.time() - t1 < 0.4:
                if cnc_serial.in_waiting:
                    decoded = cnc_serial.readline().decode(errors='ignore').strip()
                    # Stav
                    if "Idle" in decoded:
                        grbl_status = "Idle"
                    elif "Run" in decoded:
                        grbl_status = "Run"
                    elif ("Error" in decoded) or ("error" in decoded):
                        grbl_status = "Error"
                    elif ("Alarm" in decoded) or ("alarm" in decoded):
                        grbl_status = "Alarm"
                    # MPos
                    if 'MPos:' in decoded:
                        for part in decoded.split('|'):
                            if part.startswith('MPos:'):
                                grbl_last_position = part[5:].strip()
                                break
                    break
                time.sleep(0.01)
        except Exception:
            pass  # kdy≈æ se to nepovede, nevad√≠ ‚Äì p≈ô√≠≈°t√≠ dotaz to do≈æene

def _get_final_dir(axis: str) -> int:
    """Smƒõr fin√°ln√≠ho dojezdu pro osu (+1 nebo -1). Lze p≈ôepsat v configu jako dict anti_backlash_final_dir."""
    try:
        import config
        d = getattr(config, "anti_backlash_final_dir", None)
        if isinstance(d, dict) and axis in d and d[axis] in (-1, 1):
            return int(d[axis])
    except Exception:
        pass
    return 1  # default: +X, +Y, +Z

def _get_ab_axes() -> set:
    """Kter√© osy ≈ôe≈°it anti-backlash (nap≈ô. 'XY' nebo 'XYZ')."""
    try:
        import config
        s = getattr(config, "anti_backlash_axes", "XY")
        return set(str(s).upper())
    except Exception:
        return set("XY")

def _get_ab_amount() -> float:
    """Velikost p≈ôedpƒõt√≠ v mm (kolik 'p≈ôejedu' proti v≈Øli p≈ôed fin√°ln√≠m dojezdem)."""
    try:
        import config
        v = float(getattr(config, "anti_backlash_mm", 0.02))
        return max(0.0, v)
    except Exception:
        return 0.02


def move_axis(axis: str, value: float):
    """
    Relativn√≠ pohyb v jedn√© ose.
    """
    gcode = f"G91 G1 {axis.upper()}{value:.3f} M3 S750 F2000" # M3 S750 je pro spu≈°tƒõn√≠ osvƒõtlen√≠, F2000 je rychlost posuvu
    send_gcode(gcode)

def grbl_home():
    """
    Spust√≠ homing sekvenci ($H)
    """
    global cnc_serial, grbl_last_position, grbl_status, position_lock
    try:
        send_gcode("$H")
        print("üè† GRBL Home odesl√°no")
    except Exception as e:
        print("‚ö†Ô∏è  Chyba zas√≠l√°n√≠ Home:", e)
        return

    # Poƒçkej na konec homing sekvence
    grbl_wait_for_idle()
    # Aktualizuj WPos pozici na MPos, proto≈æe po homingu m≈Ø≈æe b√Ωt WPos jin√° ne≈æ MPos
    # je lep≈°√≠ pracovat s MPos = WPos, proto≈æe MPos p≈ôich√°z√≠ v odpovƒõdi na '?' ƒçastƒõji
    try:
        x, y, z = [float(val) for val in grbl_last_position.split(",")]
        send_gcode(f"G10 L20 P1 X{x:.3f} Y{y:.3f} Z{z:.3f}")
        print(f"Nastaveno WPos na MPos: X={x:.3f}, Y={y:.3f}, Z={z:.3f}")
    except Exception as e:
        print("Chyba p≈ôi nastavov√°n√≠ WPos na MPos:", e)

def grbl_clear_alarm():
    """
    Odblokuje ALARM stav ($X)
    """
    send_gcode("$X")
    time.sleep(0.5)

def grbl_abort():
    """
    Nouzov√© p≈ôeru≈°en√≠ (ctrl-x)
    """
    global cnc_serial
    send_gcode("\x18")  # Odesl√°n√≠ Ctrl-X jako G-code p≈ô√≠kazu
    time.sleep(0.5)  # Kr√°tk√° prodleva pro stabilitu
    print("[GRBL] Abort odesl√°n (Ctrl-X)")

def _send_realtime(byte_cmd: bytes):
    """
    Odesl√°n√≠ real-time p≈ô√≠kazu do GRBL (nap≈ô. b'!', b'~', b'\x85').
    Nep≈ôid√°v√° newline a dr≈æ√≠ io_lock, aby se to nepralo s dal≈°√≠ I/O.
    """
    global cnc_serial, io_lock
    if cnc_serial is None or not cnc_serial.is_open:
        print("[GRBL] Port nen√≠ otev≈ôen√Ω")
        return
    with io_lock:
        try:
            cnc_serial.write(byte_cmd)
            cnc_serial.flush()
        except Exception as e:
            print(f"[GRBL] Chyba p≈ôi odes√≠l√°n√≠ real-time p≈ô√≠kazu: {e}")

def feed_hold():
    """Okam≈æit√Ω ≈ô√≠zen√Ω stop bez ztr√°ty pozice (stav -> Hold)."""
    _send_realtime(b'!')

def resume_motion():
    """Pokraƒçov√°n√≠ po feed-holdu (Cycle Start)."""
    _send_realtime(b'~')

def jog_cancel():
    """
    Zru≈°√≠ rozpracovan√Ω pohyb a vypr√°zdn√≠ bƒõ≈æ√≠c√≠ akci bez resetu.
    V GRBL 1.1 se pou≈æ√≠v√° 0x85 jako 'Jog Cancel' i pro ukonƒçen√≠ hold stavu bez ztr√°ty pozice.
    """
    _send_realtime(b'\x85')

def cancel_move(timeout: float = 3.0):
    """
    Okam≈æitƒõ zastav√≠ pr√°vƒõ prob√≠haj√≠c√≠ jogovac√≠ pohyb ($J=...).
    -> Po≈°le realtime Jog Cancel (0x85) a ƒçek√° na Idle.
    -> Nepou≈æ√≠v√° reset (Ctrl-X), tak≈æe se neztrat√≠ pozice.
    """
    global grbl_status

    # 1) Po≈°leme Jog Cancel
    jog_cancel()

    # 2) Poƒçkej na Idle (status aktualizuje timer v init_grbl)
    t0 = time.time()
    while time.time() - t0 < timeout:
        if grbl_status == "Idle":
            print("[GRBL] cancel_move(): jog zru≈°en, CNC je v Idle.")
            return
        time.sleep(0.05)

    print("[GRBL] cancel_move(): timeout ‚Äì GRBL nen√≠ Idle!")


# Absolutn√≠ pohyb bez anti-backlashe
def move_to_position(x: float, y: float, z: float = None, feed: float = 2000):
    global grbl_status
    if z is None:
        z = default_Z_position
    if feed is None:
        feed = 2000
    send_gcode(f"G90 G1 X{x:.3f} Y{y:.3f} Z{z:.3f} M3 S750 F{feed}")  # G90 je absolutn√≠ pohyb, F500 je rychlost posuvu
    grbl_wait_for_idle() # Poƒçkej na dokonƒçen√≠ pohybu

# Absolutn√≠ pohyb s anti-backlashem
# (p≈ôedpƒõt√≠ proti v≈Øli v z√°vitov√© tyƒçi, kter√© se pou≈æije p≈ôed fin√°ln√≠m dojezdem)
# -> pro ka≈ædou osu vytvo≈ô√≠me 'approach' (p≈ôedpƒõt√≠ proti v≈Øli) a hned pot√© fin√°ln√≠ kr√°tk√Ω dojezd
# -> v≈°echny bloky po≈°leme rychle za sebou (ƒçek√°me na ok), na konci p≈ô√≠padnƒõ jednou poƒçk√°me na Idle
# -> pokud je anti_backlash=False, tak se pou≈æije jen fin√°ln√≠ dojezd
def move_to_position_antibacklash(x: float, y: float, z: float = None, *, anti_backlash: bool = True,
                     wait_end: bool = True, feed_xy: int = 2000, feed_z: int = 500):
    """
    Absolutn√≠ naj√≠≈ædƒõn√≠ s voliteln√Ωm anti-backlashem.
    -> pro ka≈ædou osu vytvo≈ô√≠me 'approach' (p≈ôedpƒõt√≠ proti v≈Øli) a hned pot√© fin√°ln√≠ kr√°tk√Ω dojezd
    -> v≈°echny bloky po≈°leme rychle za sebou (ƒçek√°me na ok), na konci p≈ô√≠padnƒõ jednou poƒçk√°me na Idle
    """
    global grbl_status, grbl_last_position
    from config import default_Z_position

    if z is None:
        z = default_Z_position

    # svƒõtlo / modalita
    send_gcode("M3 S750")
    send_gcode("G90")  # absolutn√≠ re≈æim

    # aktu√°ln√≠ pozice (best-effort)
    try:
        with position_lock:
            cx, cy, cz = [float(v) for v in grbl_last_position.split(",")]
    except Exception:
        cx, cy, cz = 0.0, 0.0, 0.0

    AB_AXES = _get_ab_axes()
    AB_MM   = _get_ab_amount()
    eps     = 1e-6

    gcode_queue = []

    def plan_axis(axis: str, current: float, target: float, feed: int):
        """Napl√°nuje approach + final pro jednu osu bez ƒçek√°n√≠; vr√°t√≠ nov√Ω 'current'."""
        if abs(target - current) <= eps:
            return current
        if anti_backlash and AB_MM > 0.0 and axis in AB_AXES:
            dirF = _get_final_dir(axis)  # +1 nebo -1
            approach = target - dirF * AB_MM
            # Bezpeƒçn√Ω mal√Ω clamp: kdy≈æ u≈æ jsme 'za' approach ve smƒõru fin√°ln√≠ho dojezdu, approach p≈ôeskoƒç
            need_approach = (dirF > 0 and approach > current + eps) or (dirF < 0 and approach < current - eps)
            if need_approach:
                if axis == 'X':
                    gcode_queue.append(f"G1 X{approach:.3f} F{feed}")
                elif axis == 'Y':
                    gcode_queue.append(f"G1 Y{approach:.3f} F{feed}")
                else:
                    gcode_queue.append(f"G1 Z{approach:.3f} F{feed}")
        # fin√°ln√≠ kr√°tk√Ω dojezd v≈ædy
        if axis == 'X':
            gcode_queue.append(f"G1 X{target:.3f} F{feed}")
        elif axis == 'Y':
            gcode_queue.append(f"G1 Y{target:.3f} F{feed}")
        else:
            gcode_queue.append(f"G1 Z{target:.3f} F{feed}")
        return target

    # napl√°nuj osy postupnƒõ (per-axis), ale bez pr≈Øbƒõ≈æn√©ho ƒçek√°n√≠ na Idle
    cx = plan_axis('X', cx, x, feed_xy)
    cy = plan_axis('Y', cy, y, feed_xy)
    cz = plan_axis('Z', cz, z, feed_z)

    # ode≈°li v≈°echny bloky do GRBL (send_gcode ƒçek√° jen na 'ok', ne na fyzick√© dojet√≠)
    for line in gcode_queue:
        send_gcode(line)

    # a teprve teƒè jednou poƒçkat na dokonƒçen√≠ cel√© sekvence (pokud chceme)
    if wait_end:
        grbl_wait_for_idle()  # jednor√°zovƒõ na z√°vƒõr cel√© sady pohyb≈Ø


def move_to_home_position():
    print("[MOTION] Naj√≠≈æd√≠m na v√Ωchoz√≠ pozici (-245, -245)")
    move_to_position(-245, -245)  # Pou≈æijeme v√Ωchoz√≠ pozici Mpos pro GRBL, kter√° je -245, -245

def move_to_coordinates(x: float, y: float, z: float = None, feed: float = 2000 ):
    move_to_position(x, y, z, feed)

def move_relative(dx: float, dy: float):
    gcode = f"G91\nG0 X{dx:.3f} Y{dy:.3f}"
    send_gcode(gcode)


def grbl_update_position():
    """
    Po≈°le '?' a naƒçte odpovƒõƒè od GRBL (stav + MPos).
    Pokud je linka pr√°vƒõ obsazen√°, zkus√≠ chvilku poƒçkat, jinak vr√°t√≠ cache.
    """
    global cnc_serial, position_lock, io_lock, grbl_status, grbl_last_position

    # kr√°tk√Ω timeout m√≠sto √∫pln√©ho non-blockingu (eliminuje zpo≈ædƒõn√≠ po send_gcode)
    if not io_lock.acquire(timeout=0.2):
        return grbl_last_position, grbl_status

    try:
        cnc_serial.write(b'?')
        cnc_serial.flush()
        t0 = time.time()
        while time.time() - t0 < 0.6:
            if cnc_serial.in_waiting:
                decoded = cnc_serial.readline().decode(errors='ignore').strip()

                if "Idle" in decoded:
                    grbl_status = "Idle"
                elif "Run" in decoded:
                    grbl_status = "Run"
                elif ("Error" in decoded) or ("error" in decoded):
                    grbl_status = "Error"
                elif ("Alarm" in decoded) or ("alarm" in decoded):
                    grbl_status = "Alarm"

                if 'MPos:' in decoded:
                    for part in decoded.split('|'):
                        if part.startswith('MPos:'):
                            with position_lock:
                                grbl_last_position = part[5:].strip()
                            break
                return grbl_last_position, grbl_status

            time.sleep(0.02)

        # Timeout ‚Äì cache nech√°me jak je (≈æ√°dn√© "Unknown")
        return grbl_last_position, grbl_status
    finally:
        io_lock.release()

def grbl_wait_for_idle():
    global grbl_status
    """
    ƒåek√°, dokud GRBL nep≈ôijde do stavu Idle (stav z√≠sk√° z threadu position_timer v init_grbl()).
    Zamez√≠ se t√≠m opakov√°n√≠ dotaz≈Ø na GRBL stav p≈ôes s√©riovou linku.
    """
    # print("[GRBL] Waiting for Idle:", grbl_status)
    time.sleep(0.5)  # Stav CNC se updatuje ka≈æd√Ωch 0.5s, tak≈æe poƒçk√°me 0.5s, aby se stihl aktualizovat
    while True:
        if grbl_status == "Idle":
            break
        time.sleep(0.5)